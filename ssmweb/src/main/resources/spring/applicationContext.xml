<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

	<!-- 配置扫描注解,不扫描@Controller注解 -->
	<context:component-scan base-package="xyz.chanjkf">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:property-placeholder location="classpath:persistence-*.properties" ignore-unresolvable="true"/>

	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
	<!-- 连接池 ,本质是对GenericObjectPoolConfig的属性的设置-->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="minIdle" value="${redis.minIdle}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- REDIS连接工厂 -->
	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- 基础连接参数 -->
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<!--<property name="password" value="${redis.password}" />-->
		<!-- 是否启用连接池 -->
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<!-- 对String类型处理的RedisTemplate -->
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>

	<!-- 对LIST,SET,ZSET,HASH等类型的处理RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory"/>
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="valueSerializer">
			<!-- 对象序列化方案 -->
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
		</property>
	</bean>



	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<!-- 可以加多个包 -->
				<value>xyz.chanjkf.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.connection.isolation">${hibernate.connection.isolation}</prop>
			</props>
		</property>


	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg>
			<bean class="com.zaxxer.hikari.HikariConfig">
				<property name="driverClassName" value="${hibernate.master.connection.driverClass}"/>
				<property name="jdbcUrl" value="${hibernate.master.connection.url}"/>
				<property name="username" value="${hibernate.master.connection.username}"/>
				<property name="password" value="${hibernate.master.connection.password}"/>
				<property name="readOnly" value="false" />
				<property name="connectionTimeout" value="${jdbc.connectionTimeout}"/>
				<property name="idleTimeout" value="${jdbc.idleTimeout}"/>
				<property name="maxLifetime" value="${jdbc.maxLifetime}"/>
				<property name="maximumPoolSize" value="${jdbc.maximumPoolSize}"/>
			</bean>
		</constructor-arg>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 配置Hibernate事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 单数据源事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="is*" propagation="REQUIRED"/>
			<tx:method name="has*" propagation="REQUIRED"/>
			<tx:method name="can*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="register*" propagation="REQUIRED"/>
			<tx:method name="increate*" propagation="REQUIRED"/>
			<tx:method name="merge*" propagation="REQUIRED"/>
			<tx:method name="activate*" propagation="REQUIRED"/>
			<tx:method name="init*" propagation="REQUIRED"/>
			<tx:method name="send*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config expose-proxy="true">
		<aop:pointcut id="allManagerMethod" expression="execution(* xyz.chanjkf.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>
	</aop:config>


	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor"
		  class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- Freemarker配置 -->
	<bean id="freemarkerConfig"
		  class="xyz.chanjkf.utils.freemarker.CustomFreeMarkerConfigurer">

		<property name="templateLoaderPath" value="/view/ftl/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
			</props>
		</property>
	</bean>
</beans>